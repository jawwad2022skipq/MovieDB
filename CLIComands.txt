1- dotnet new webapp -o RazorPagesMovie
The command dotnet new webapp -o RazorPagesMovie creates a new Razor Pages application named "RazorPagesMovie" in the current directory.

2- code -r RazorPagesMovie
The command code -r RazorPagesMovie opens Visual Studio Code with the newly created Razor Pages application, specifically opening the "RazorPagesMovie" folder.

3- dotnet dev-certs https --trust
The dotnet dev-certs https --trust command is used to trust the development certificate generated by .NET Core for HTTPS connections. By running this command, you ensure that your local development environment recognizes and trusts the self-signed certificate used for secure connections during development.

4- dotnet tool uninstall --global dotnet-aspnet-codegenerator
dotnet tool install --global dotnet-aspnet-codegenerator
This command installs the ASP.NET Core scaffolding code generator tool globally. The scaffolding tool is used to generate code for Razor Pages and controllers based on database models.

5- dotnet tool uninstall --global dotnet-ef
dotnet tool install --global dotnet-ef
This command installs the Entity Framework Core command-line tools globally. These tools provide commands for managing database migrations, generating database contexts, and performing database operations.

6- dotnet add package Microsoft.EntityFrameworkCore.Design
This command adds the Microsoft.EntityFrameworkCore.Design package to your project. This package contains design-time services and tools for Entity Framework Core, such as the DbContext generator.

7- dotnet add package Microsoft.EntityFrameworkCore.SQLite
This command adds the Microsoft.EntityFrameworkCore.SQLite package to your project. This package enables SQLite as a database provider for Entity Framework Core.

8- dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design
This command adds the Microsoft.VisualStudio.Web.CodeGeneration.Design package to your project. This package provides design-time scaffolding services and tools for code generation in ASP.NET Core projects.

9- dotnet add package Microsoft.EntityFrameworkCore.SqlServer
This command adds the Microsoft.EntityFrameworkCore.SqlServer package to your project. This package enables SQL Server as a database provider for Entity Framework Core.

10- dotnet add package Microsoft.EntityFrameworkCore.Tools
This command adds the Microsoft.EntityFrameworkCore.Tools package to your project. This package includes additional Entity Framework Core command-line tools for migrations and database operations.

11- dotnet aspnet-codegenerator razorpage -m Movie -dc RazorPagesMovie.Data.RazorPagesMovieContext -udl -outDir Pages/Movies --referenceScriptLibraries --databaseProvider sqlite
This generates Razor Pages for a model named "Movie" in a .NET Razor Pages application
dotnet aspnet-codegenerator razorpage: This is the command to generate Razor Pages.

-m Movie: This specifies the model name as "Movie".

-dc RazorPagesMovie.Data.RazorPagesMovieContext: This specifies the data context class for your application, which is responsible for interacting with the database.

-udl: Use default Layout

-outDir Pages/Movies: This specifies the output directory for the generated Razor Pages. In this case, the Pages/Movies directory will be created, and the generated Pages will be placed there.

--referenceScriptLibraries: This includes references to the required script libraries (jQuery and unobtrusive Ajax) in the generated Razor Pages.

--databaseProvider sqlite: This specifies the database provider to use. In this case, it is set to SQLite.

12- dotnet aspnet-codegenerator razorpage -h
Get help on "dotnet aspnet-codegenerator razorpage" command

13- dotnet ef migrations add InitialCreate
The migrations command generates code to create the initial database schema. The schema is based on the model specified in DbContext. The InitialCreate argument is used to name the migrations. Any name can be used, but by convention a name is selected that describes the migration.

14- dotnet ef database update
The update command runs the Up method in migrations that have not been applied. In this case, update runs the Up method in the Migrations/<time-stamp>_InitialCreate.cs file, which creates the database.

(Please note that you should run the above 2 commands whenever you make changes to your entity models or the database context. Running migrations helps keep the database schema in sync with your application's data model.)

